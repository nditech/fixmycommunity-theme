use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.24
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1433826839',
        'name' => 'admin/timeline.html',
    },
    BLOCK => sub {
    my $context = shift || die "template sub called without context\n";
    my $stash   = $context->stash;
    my $output  = '';
    my $_tt_error;
    
    eval { BLOCK: {
#line 1 "/opt/fixmystreet/fixmystreet/templates/web/base/admin/timeline.html"
$output .=  $context->include('admin/header.html', { 'title' => $stash->get(['loc', [ 'Timeline' ]]) });
$output .=  "\n";

$output .=  "\n";
#line 7 "/opt/fixmystreet/fixmystreet/templates/web/base/admin/timeline.html"
$stash->set('date', '');
$output .=  "\n";
#line 42 "/opt/fixmystreet/fixmystreet/templates/web/base/admin/timeline.html"

# FOREACH 
do {
    my ($_tt_value, $_tt_error, $_tt_oldloop);
    my $_tt_list = $stash->get(['time', 0, 'keys', 0, 'sort', 0, 'reverse', 0]);
    
    unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
        $_tt_list = Template::Config->iterator($_tt_list)
            || die $Template::Config::ERROR, "\n"; 
    }

    ($_tt_value, $_tt_error) = $_tt_list->get_first();
    eval { $_tt_oldloop = $stash->get('loop') };
    $stash->set('loop', $_tt_list);
    eval {
FOR1:   while (! $_tt_error) {
            $stash->{'moment'} = $_tt_value;
#line 9 "/opt/fixmystreet/fixmystreet/templates/web/base/admin/timeline.html"
$stash->set('curdate', $stash->get(['time', 0, $stash->get('moment'), 0, 0, 0, 'date', 0, 'strftime', [ '%A, %e %B %Y' ]]));
#line 16 "/opt/fixmystreet/fixmystreet/templates/web/base/admin/timeline.html"
if ($stash->get('date') ne $stash->get('curdate')) {
$output .=  "\n        ";
#line 11 "/opt/fixmystreet/fixmystreet/templates/web/base/admin/timeline.html"
if ($stash->get('date')) {
$output .=  '</dl>';
}

$output .=  "\n        <h2>";
#line 12 "/opt/fixmystreet/fixmystreet/templates/web/base/admin/timeline.html"
$output .=  $stash->get('curdate');
$output .=  "</h2>\n\n        <dl>";
#line 15 "/opt/fixmystreet/fixmystreet/templates/web/base/admin/timeline.html"
$stash->set('date', $stash->get('curdate'));
}

$output .=  "    <dt><b>";
#line 17 "/opt/fixmystreet/fixmystreet/templates/web/base/admin/timeline.html"
$output .=  $stash->get(['time', 0, $stash->get('moment'), 0, 0, 0, 'date', 0, 'hms', 0]);
$output .=  "</b></dt>\n    <dd>\n    ";
#line 40 "/opt/fixmystreet/fixmystreet/templates/web/base/admin/timeline.html"

# FOREACH 
do {
    my ($_tt_value, $_tt_error, $_tt_oldloop);
    my $_tt_list = $stash->get(['time', 0, $stash->get('moment'), 0]);
    
    unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
        $_tt_list = Template::Config->iterator($_tt_list)
            || die $Template::Config::ERROR, "\n"; 
    }

    ($_tt_value, $_tt_error) = $_tt_list->get_first();
    eval { $_tt_oldloop = $stash->get('loop') };
    $stash->set('loop', $_tt_list);
    eval {
FOR2:   while (! $_tt_error) {
            $stash->{'item'} = $_tt_value;
#line 38 "/opt/fixmystreet/fixmystreet/templates/web/base/admin/timeline.html"

# SWITCH
do {
    my $_tt_result = $stash->get(['item', 0, 'type', 0]);
    my $_tt_match;
    SWITCH: {
$_tt_match = 'problemCreated';
$_tt_match = [ $_tt_match ] unless ref $_tt_match eq 'ARRAY';
if (grep(/^\Q$_tt_result\E$/, @$_tt_match)) {
#line 22 "/opt/fixmystreet/fixmystreet/templates/web/base/admin/timeline.html"
$output .=  $stash->get(['tprintf', [ $stash->get(['loc', [ 'Problem %d created' ]]), $stash->get(['item', 0, 'obj', 0, 'id', 0]) ]]);
$output .=  "; ";
#line 22 "/opt/fixmystreet/fixmystreet/templates/web/base/admin/timeline.html"
$output .=  $context->process('problem_name', { 'problem' => $stash->get(['item', 0, 'obj', 0]) });
$output .=  "            ";
    last SWITCH;
}
$_tt_match = 'problemConfirmed';
$_tt_match = [ $_tt_match ] unless ref $_tt_match eq 'ARRAY';
if (grep(/^\Q$_tt_result\E$/, @$_tt_match)) {
#line 24 "/opt/fixmystreet/fixmystreet/templates/web/base/admin/timeline.html"
$output .=  $stash->get(['tprintf', [ $stash->get(['loc', [ 'Problem %s confirmed' ]]), '<a href="'  . $stash->get(['c', 0, 'uri_for_email', [ '/report', $stash->get(['item', 0, 'obj', 0, 'id', 0]) ]])  . '" class="admin-offsite-link">'  . $stash->get(['item', 0, 'obj', 0, 'id', 0])  . '</a>' ]]);
$output .=  "; ";
#line 24 "/opt/fixmystreet/fixmystreet/templates/web/base/admin/timeline.html"
$output .=  $context->process('problem_name', { 'problem' => $stash->get(['item', 0, 'obj', 0]) });
$output .=  "            ";
    last SWITCH;
}
$_tt_match = 'problemSent';
$_tt_match = [ $_tt_match ] unless ref $_tt_match eq 'ARRAY';
if (grep(/^\Q$_tt_result\E$/, @$_tt_match)) {
$output .=  "\n                ";
#line 26 "/opt/fixmystreet/fixmystreet/templates/web/base/admin/timeline.html"
$output .=  $stash->get(['tprintf', [ $stash->get(['loc', [ 'Problem %s sent to council %s' ]]), '<a href="'  . $stash->get(['c', 0, 'uri_for_email', [ '/report', $stash->get(['item', 0, 'obj', 0, 'id', 0]) ]])  . '" class="admin-offsite-link">'  . $stash->get(['item', 0, 'obj', 0, 'id', 0])  . '</a>', $stash->get(['item', 0, 'obj', 0, 'bodies_str', 0]) ]]);
$output .=  "\n            ";
    last SWITCH;
}
$_tt_match = 'quesSent';
$_tt_match = [ $_tt_match ] unless ref $_tt_match eq 'ARRAY';
if (grep(/^\Q$_tt_result\E$/, @$_tt_match)) {
$output .=  "\n                ";
#line 28 "/opt/fixmystreet/fixmystreet/templates/web/base/admin/timeline.html"
$output .=  $stash->get(['tprintf', [ $stash->get(['loc', [ 'Questionnaire %d sent for problem %d' ]]), $stash->get(['item', 0, 'obj', 0, 'id', 0]), $stash->get(['item', 0, 'obj', 0, 'problem_id', 0]) ]]);
$output .=  "\n            ";
    last SWITCH;
}
$_tt_match = 'quesAnswered';
$_tt_match = [ $_tt_match ] unless ref $_tt_match eq 'ARRAY';
if (grep(/^\Q$_tt_result\E$/, @$_tt_match)) {
$output .=  "\n                ";
#line 30 "/opt/fixmystreet/fixmystreet/templates/web/base/admin/timeline.html"
$output .=  $stash->get(['tprintf', [ $stash->get(['loc', [ 'Questionnaire %d answered for problem %d, %s to %s' ]]), $stash->get(['item', 0, 'obj', 0, 'id', 0]), $stash->get(['item', 0, 'obj', 0, 'problem_id', 0]), $stash->get(['item', 0, 'obj', 0, 'old_state', 0]), $stash->get(['item', 0, 'obj', 0, 'new_state', 0]) ]]);
$output .=  "\n            ";
    last SWITCH;
}
$_tt_match = 'update';
$_tt_match = [ $_tt_match ] unless ref $_tt_match eq 'ARRAY';
if (grep(/^\Q$_tt_result\E$/, @$_tt_match)) {
$output .=  "\n                ";
#line 32 "/opt/fixmystreet/fixmystreet/templates/web/base/admin/timeline.html"

# CAPTURE
$stash->set('name', do {
    my $output = '';

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  ($stash->get(['item', 0, 'obj', 0, 'name', 0]) || 'anonymous');
    
    &$_tt_filter($output);
};

    $output;
});

$output .=  "\n                ";
#line 33 "/opt/fixmystreet/fixmystreet/templates/web/base/admin/timeline.html"
$output .=  $stash->get(['tprintf', [ $stash->get(['loc', [ 'Update %s created for problem %d; by %s' ]]), '<a href=\''  . $stash->get(['c', 0, 'uri_for_email', [ '/report', $stash->get(['item', 0, 'obj', 0, 'problem_id', 0]) ]])  . '#update_'  . $stash->get(['item', 0, 'obj', 0, 'id', 0])  . '\' class=\'admin-offsite-link\'>'  . $stash->get(['item', 0, 'obj', 0, 'id', 0])  . '</a>', $stash->get(['item', 0, 'obj', 0, 'problem_id', 0]), $stash->get('name') ]]);
$output .=  " &lt;";
#line 33 "/opt/fixmystreet/fixmystreet/templates/web/base/admin/timeline.html"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['item', 0, 'obj', 0, 'user', 0, 'email', 0]);
    
    &$_tt_filter($output);
};

$output .=  "&gt;\n            ";
    last SWITCH;
}
$_tt_match = 'alertSub';
$_tt_match = [ $_tt_match ] unless ref $_tt_match eq 'ARRAY';
if (grep(/^\Q$_tt_result\E$/, @$_tt_match)) {
$output .=  "\n                 ";
#line 35 "/opt/fixmystreet/fixmystreet/templates/web/base/admin/timeline.html"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['tprintf', [ $stash->get(['loc', [ 'Alert %d created for %s, type %s, parameters %s / %s' ]]), $stash->get(['item', 0, 'obj', 0, 'id', 0]), $stash->get(['item', 0, 'obj', 0, 'user', 0, 'email', 0]), $stash->get(['item', 0, 'obj', 0, 'alert_type', 0, 'ref', 0]), $stash->get(['item', 0, 'obj', 0, 'parameter', 0]), $stash->get(['item', 0, 'obj', 0, 'parameter2', 0]) ]]);
    
    &$_tt_filter($output);
};

$output .=  "\n            ";
    last SWITCH;
}
$_tt_match = 'alertDel';
$_tt_match = [ $_tt_match ] unless ref $_tt_match eq 'ARRAY';
if (grep(/^\Q$_tt_result\E$/, @$_tt_match)) {
$output .=  "\n                 ";
#line 37 "/opt/fixmystreet/fixmystreet/templates/web/base/admin/timeline.html"
$output .=  $stash->get(['tprintf', [ $stash->get(['loc', [ 'Alert %d disabled (created %s)' ]]), $stash->get(['item', 0, 'obj', 0, 'id', 0]), $stash->get(['item', 0, 'obj', 0, 'whensubscribed', 0, 'strftime', [ '%H:%M:%S %e %B %Y' ]]) ]]);
    last SWITCH;
}

    }
};

$output .=  "\n        <br />";;
            ($_tt_value, $_tt_error) = $_tt_list->get_next();
        }
    };
    $stash->set('loop', $_tt_oldloop);
    die $@ if $@;
    $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
    die $_tt_error if $_tt_error;
};

$output .=  " \n    </dd>\n";;
            ($_tt_value, $_tt_error) = $_tt_list->get_next();
        }
    };
    $stash->set('loop', $_tt_oldloop);
    die $@ if $@;
    $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
    die $_tt_error if $_tt_error;
};

$output .=  "\n\n";
#line 44 "/opt/fixmystreet/fixmystreet/templates/web/base/admin/timeline.html"
$output .=  $context->include('admin/footer.html');
$output .=  "\n";
    } };
    if ($@) {
        $_tt_error = $context->catch($@, \$output);
        die $_tt_error unless $_tt_error->type eq 'return';
    }

    return $output;
},
    DEFBLOCKS => {
        'problem_name' => sub {
    my $context = shift || die "template sub called without context\n";
    my $stash   = $context->stash;
    my $output  = '';
    my $_tt_error;
    
    eval { BLOCK: {
#line 4 "/opt/fixmystreet/fixmystreet/templates/web/base/admin/timeline.html"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['tprintf', [ $stash->get(['loc', [ 'by %s' ]]), $stash->get(['problem', 0, 'name', 0]) ]]);
    
    &$_tt_filter($output);
};

$output .=  " &lt;";
#line 4 "/opt/fixmystreet/fixmystreet/templates/web/base/admin/timeline.html"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['problem', 0, 'user', 0, 'email', 0]);
    
    &$_tt_filter($output);
};

$output .=  "&gt;, '";
#line 4 "/opt/fixmystreet/fixmystreet/templates/web/base/admin/timeline.html"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['problem', 0, 'title', 0]);
    
    &$_tt_filter($output);
};

$output .=  "'";
    } };
    if ($@) {
        $_tt_error = $context->catch($@, \$output);
        die $_tt_error unless $_tt_error->type eq 'return';
    }

    return $output;
},
    },
});
