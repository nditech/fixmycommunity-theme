use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.24
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1433826839',
        'name' => 'report/new/category_extras.html',
    },
    BLOCK => sub {
    my $context = shift || die "template sub called without context\n";
    my $stash   = $context->stash;
    my $output  = '';
    my $_tt_error;
    
    eval { BLOCK: {
$output .=  "<div id=\"category_meta\">";
#line 24 "/opt/fixmystreet/fixmystreet/templates/web/base/report/new/category_extras.html"
if ($stash->get('report_meta')) {
#line 3 "/opt/fixmystreet/fixmystreet/templates/web/base/report/new/category_extras.html"
$stash->set('category', $stash->get(['report', 0, 'category', 0]));
$output .=  "\n    <h4>Additional Information</h4>";
#line 23 "/opt/fixmystreet/fixmystreet/templates/web/base/report/new/category_extras.html"

# FOREACH 
do {
    my ($_tt_value, $_tt_error, $_tt_oldloop);
    my $_tt_list = $stash->get(['category_extras', 0, $stash->get('category'), 0]);
    
    unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
        $_tt_list = Template::Config->iterator($_tt_list)
            || die $Template::Config::ERROR, "\n"; 
    }

    ($_tt_value, $_tt_error) = $_tt_list->get_first();
    eval { $_tt_oldloop = $stash->get('loop') };
    $stash->set('loop', $_tt_list);
    eval {
FOR1:   while (! $_tt_error) {
            $stash->{'meta'} = $_tt_value;
#line 6 "/opt/fixmystreet/fixmystreet/templates/web/base/report/new/category_extras.html"
$stash->set('meta_name', $stash->get(['meta', 0, 'code', 0]));
$output .=  "\n            <label for=\"form_";
#line 8 "/opt/fixmystreet/fixmystreet/templates/web/base/report/new/category_extras.html"
$output .=  $stash->get('meta_name');
$output .=  "\">";
#line 8 "/opt/fixmystreet/fixmystreet/templates/web/base/report/new/category_extras.html"
$output .=  $stash->get(['meta', 0, 'description', 0])  . ':';
$output .=  "</label>\n            ";
#line 11 "/opt/fixmystreet/fixmystreet/templates/web/base/report/new/category_extras.html"
if ($stash->get(['field_errors', 0, $stash->get('meta_name'), 0])) {
$output .=  "\n                <p class='form-error'>";
#line 10 "/opt/fixmystreet/fixmystreet/templates/web/base/report/new/category_extras.html"
$output .=  $stash->get(['field_errors', 0, $stash->get('meta_name'), 0]);
$output .=  "</p>\n            ";
}

$output .=  "            ";
#line 22 "/opt/fixmystreet/fixmystreet/templates/web/base/report/new/category_extras.html"
if ($stash->get(['meta', 0, 'variable', 0]) ne 'false') {
$output .=  "\n                ";
#line 21 "/opt/fixmystreet/fixmystreet/templates/web/base/report/new/category_extras.html"
if ($stash->get(['meta', 0, 'exists', [ 'values' ]])) {
$output .=  "\n                    <select name=\"";
#line 14 "/opt/fixmystreet/fixmystreet/templates/web/base/report/new/category_extras.html"
$output .=  $stash->get('meta_name');
$output .=  "\" id=\"form_";
#line 14 "/opt/fixmystreet/fixmystreet/templates/web/base/report/new/category_extras.html"
$output .=  $stash->get('meta_name');
$output .=  "\"";
#line 14 "/opt/fixmystreet/fixmystreet/templates/web/base/report/new/category_extras.html"
$output .=  $stash->get(['meta', 0, 'required', 0]) eq 'true' ? ' required' : '';
$output .=  ">\n                        ";
#line 17 "/opt/fixmystreet/fixmystreet/templates/web/base/report/new/category_extras.html"

# FOREACH 
do {
    my ($_tt_value, $_tt_error, $_tt_oldloop);
    my $_tt_list = $stash->get(['meta', 0, 'values', 0, 'value', 0]);
    
    unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
        $_tt_list = Template::Config->iterator($_tt_list)
            || die $Template::Config::ERROR, "\n"; 
    }

    ($_tt_value, $_tt_error) = $_tt_list->get_first();
    eval { $_tt_oldloop = $stash->get('loop') };
    $stash->set('loop', $_tt_list);
    eval {
FOR2:   while (! $_tt_error) {
            $stash->{'option'} = $_tt_value;
$output .=  "\n                            <option value=\"";
#line 16 "/opt/fixmystreet/fixmystreet/templates/web/base/report/new/category_extras.html"
$output .=  $stash->get(['option', 0, 'key', 0, 0, 0]);
$output .=  "\"";
#line 16 "/opt/fixmystreet/fixmystreet/templates/web/base/report/new/category_extras.html"
if ($stash->get(['option', 0, 'key', 0, 0, 0]) eq $stash->get(['report_meta', 0, $stash->get('meta_name'), 0, 'value', 0])) {
$output .=  " selected";
}

$output .=  ">";
#line 16 "/opt/fixmystreet/fixmystreet/templates/web/base/report/new/category_extras.html"
$output .=  $stash->get(['option', 0, 'name', 0, 0, 0]);
$output .=  "</option>\n                        ";;
            ($_tt_value, $_tt_error) = $_tt_list->get_next();
        }
    };
    $stash->set('loop', $_tt_oldloop);
    die $@ if $@;
    $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
    die $_tt_error if $_tt_error;
};

$output .=  "\n                    </select>\n                ";
}
else {
$output .=  "\n                    <input type=\"text\" value=\"";
#line 20 "/opt/fixmystreet/fixmystreet/templates/web/base/report/new/category_extras.html"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['report_meta', 0, $stash->get('meta_name'), 0, 'value', 0]);
    
    &$_tt_filter($output);
};

$output .=  "\" name=\"";
#line 20 "/opt/fixmystreet/fixmystreet/templates/web/base/report/new/category_extras.html"
$output .=  $stash->get('meta_name');
$output .=  "\" id=\"form_";
#line 20 "/opt/fixmystreet/fixmystreet/templates/web/base/report/new/category_extras.html"
$output .=  $stash->get('meta_name');
$output .=  "\"";
#line 20 "/opt/fixmystreet/fixmystreet/templates/web/base/report/new/category_extras.html"
$output .=  $stash->get(['meta', 0, 'required', 0]) eq 'true' ? ' required' : '';
$output .=  ">\n                ";
}

$output .=  "\n            ";
}
;
            ($_tt_value, $_tt_error) = $_tt_list->get_next();
        }
    };
    $stash->set('loop', $_tt_oldloop);
    die $@ if $@;
    $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
    die $_tt_error if $_tt_error;
};

}

$output .=  "\n</div>\n";
    } };
    if ($@) {
        $_tt_error = $context->catch($@, \$output);
        die $_tt_error unless $_tt_error->type eq 'return';
    }

    return $output;
},
    DEFBLOCKS => {

    },
});
