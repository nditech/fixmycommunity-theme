use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.24
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'name' => 'front/stats.html',
        'modtime' => '1433826839',
    },
    BLOCK => sub {
    my $context = shift || die "template sub called without context\n";
    my $stash   = $context->stash;
    my $output  = '';
    my $_tt_error;
    
    eval { BLOCK: {
#line 1 "/opt/fixmystreet/fixmystreet/templates/web/base/front/stats.html"
# USE
$stash->set('Comma',
            $context->plugin('Comma'));

$output .=  "\n\n";
#line 7 "/opt/fixmystreet/fixmystreet/templates/web/base/front/stats.html"
$stash->set('stats', $stash->get(['c', 0, 'cobrand', 0, 'front_stats_data', 0]));
#line 7 "/opt/fixmystreet/fixmystreet/templates/web/base/front/stats.html"
$stash->set('new_text', $stash->get(['stats', 0, 'recency', 0]) eq '1 week' ? $stash->get(['nget', [ '<big>%s</big> report in past week', '<big>%s</big> reports in past week', $stash->get(['stats', 0, 'new', 0]) ]]) : $stash->get(['nget', [ '<big>%s</big> report recently', '<big>%s</big> reports recently', $stash->get(['stats', 0, 'new', 0]) ]]));
#line 7 "/opt/fixmystreet/fixmystreet/templates/web/base/front/stats.html"
$stash->set('fixed_text', $stash->get(['nget', [ '<big>%s</big> fixed in past month', '<big>%s</big> fixed in past month', $stash->get(['stats', 0, 'fixed', 0]) ]]));
#line 7 "/opt/fixmystreet/fixmystreet/templates/web/base/front/stats.html"
$stash->set('updates_text', $stash->get(['nget', [ '<big>%s</big> update on reports', '<big>%s</big> updates on reports', $stash->get(['stats', 0, 'updates', 0]) ]]));

$output .=  "\n\n<div id=\"front_stats\">\n    <div>";
#line 38 "/opt/fixmystreet/fixmystreet/templates/web/base/front/stats.html"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('comma')
              || $context->throw($context->error);

$output .=  $stash->get(['tprintf', [ $stash->get('new_text'), $stash->get(['stats', 0, 'new', 0]) ]]);
    
    &$_tt_filter($output);
};

$output .=  "</div>\n    <div>";
#line 39 "/opt/fixmystreet/fixmystreet/templates/web/base/front/stats.html"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('comma')
              || $context->throw($context->error);

$output .=  $stash->get(['tprintf', [ $stash->get('fixed_text'), $stash->get(['stats', 0, 'fixed', 0]) ]]);
    
    &$_tt_filter($output);
};

$output .=  "</div>\n    ";
#line 42 "/opt/fixmystreet/fixmystreet/templates/web/base/front/stats.html"
if ($stash->get(['c', 0, 'cobrand', 0, 'moniker', 0]) ne 'zurich') {
$output .=  "\n    <div>";
#line 41 "/opt/fixmystreet/fixmystreet/templates/web/base/front/stats.html"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('comma')
              || $context->throw($context->error);

$output .=  $stash->get(['tprintf', [ $stash->get('updates_text'), $stash->get(['stats', 0, 'updates', 0]) ]]);
    
    &$_tt_filter($output);
};

$output .=  "</div>\n    ";
}

$output .=  "\n</div>\n";
    } };
    if ($@) {
        $_tt_error = $context->catch($@, \$output);
        die $_tt_error unless $_tt_error->type eq 'return';
    }

    return $output;
},
    DEFBLOCKS => {

    },
});
